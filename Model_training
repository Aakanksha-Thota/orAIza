{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"CNN","provenance":[],"collapsed_sections":[],"mount_file_id":"1UvglgkucSJSVRx0JjeAAshaiTuNQpxaA","authorship_tag":"ABX9TyOUyuTYJ/1IqYfR65bvHygR"},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"PuDhM8GCiB6W"},"source":["# **Mount the Google drive**\r\n","The image dataset is uploaded to the google drive and inorder to use it the drive is mounted."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h_-ZOt1DT6_n","executionInfo":{"status":"ok","timestamp":1609682520439,"user_tz":-330,"elapsed":77269,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}},"outputId":"567ac341-d919-4026-9501-41a4c969acde"},"source":["from google.colab import drive\n","drive.mount('/content/drive',force_remount=True)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xWum3mo8iVdx"},"source":["# **Resize the Dataset** \r\n","The data set has images with variables sizes so new folders are created by resizing all images to 299x299."]},{"cell_type":"code","metadata":{"id":"F8MuAmiR1d7B"},"source":["'''\r\n","#!/usr/bin/python\r\n","from PIL import Image\r\n","import os, sys\r\n","\r\n","path = \"/content/drive/My Drive/rice-diseases-image-dataset/Test/Brownspot\"\r\n","dirs = os.listdir( path )\r\n","\r\n","def resize():\r\n","  output_dir = \"/content/drive/My Drive/Paddy_disease/test/BrownSpot\"\r\n","  for item in dirs:\r\n","    if os.path.isfile(path+\"/\"+item):\r\n","      im = Image.open(path+\"/\"+item)\r\n","      imResize = im.resize((299,299), Image.ANTIALIAS)\r\n","      imResize.save( output_dir+ \"/\"+\"Resized \"+item)\r\n","\r\n","resize()\r\n","'''"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3Xttcf0x8Vkl","executionInfo":{"status":"ok","timestamp":1608816165538,"user_tz":-330,"elapsed":3274,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}},"outputId":"900348c2-9c80-4df8-87e2-6feabd052f3f"},"source":["'''\r\n","import numpy as np\r\n","from tensorflow.keras.preprocessing import image\r\n","img = image.load_img('/content/drive/My Drive/Paddy_disease/test/Hispa/Resized IMG_20190419_095008.jpg')\r\n","x = image.img_to_array(img)\r\n","np.shape(x)\r\n","'''"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(299, 299, 3)"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FLDEJAZcVYpE","executionInfo":{"status":"ok","timestamp":1609764125811,"user_tz":-330,"elapsed":1360,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}},"outputId":"db395a26-6283-4e9e-88c8-a3857dd2305f"},"source":["%cd /content/drive/My Drive/Paddy_disease"],"execution_count":82,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/Paddy_disease\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nT9uxJ22i0i7"},"source":["# **Importing the required libraries**"]},{"cell_type":"code","metadata":{"id":"wzPsdIdwV8dV","executionInfo":{"status":"ok","timestamp":1609764078450,"user_tz":-330,"elapsed":1177,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}}},"source":["import tensorflow as tf\n","import numpy as np\n","import cv2\n","from tensorflow.keras.applications import InceptionV3 \n","from tensorflow.keras.layers import Dropout, Dense, MaxPooling2D, Flatten, Conv2D\n","from tensorflow.keras import Model\n","from tensorflow.keras.optimizers import RMSprop,Adam\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from random import shuffle\n","from tensorflow.keras.applications.inception_v3 import preprocess_input\n","from tensorflow.keras.preprocessing import image\n","from keras.models import load_model\n","from tensorflow.keras import models\n","from tensorflow.keras import layers\n","from tensorflow.keras import optimizers\n"],"execution_count":80,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KsLpC0qAi-x-"},"source":["# **Data Augmentation** \r\n","Data generators that will read pictures in our source folders and feed them (with their labels) to our network are created."]},{"cell_type":"code","metadata":{"id":"hux1xXzfV_4g","executionInfo":{"status":"ok","timestamp":1609748728048,"user_tz":-330,"elapsed":1171,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}}},"source":["train_dir = './train/'\n","validation_dir = './validation/'"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ae93I08lWkw5","executionInfo":{"status":"ok","timestamp":1609748749460,"user_tz":-330,"elapsed":1005,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}}},"source":["\n","train_datagen=ImageDataGenerator(rescale=1/255.,\n","                                rotation_range=40,\n","                                width_shift_range=0.2,\n","                                height_shift_range=0.2,\n","                                shear_range=0.2,\n","                                zoom_range=0.2,\n","                                horizontal_flip=True\n","                                )\n","validation_datagen=ImageDataGenerator(rescale=1/255.)\n"],"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tD3iseGhXPg6","executionInfo":{"status":"ok","timestamp":1609748751786,"user_tz":-330,"elapsed":928,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}},"outputId":"f1280192-6f71-4f00-9d5f-af50b364ad60"},"source":["train_generator=train_datagen.flow_from_directory(\n","        train_dir,\n","        target_size=(299,299),\n","        batch_size=32,\n","        class_mode='categorical')\n","\n","validation_generator=validation_datagen.flow_from_directory(\n","        validation_dir,\n","        target_size=(299, 299),\n","        batch_size=10,\n","        class_mode='categorical',\n","        shuffle=True)\n"],"execution_count":33,"outputs":[{"output_type":"stream","text":["Found 4584 images belonging to 4 classes.\n","Found 493 images belonging to 4 classes.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2K_ofpAGFQtX","executionInfo":{"status":"ok","timestamp":1609758482282,"user_tz":-330,"elapsed":957,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}},"outputId":"380792f7-cbc8-4067-d664-5d200f673532"},"source":["print(train_generator.class_indices)"],"execution_count":70,"outputs":[{"output_type":"stream","text":["{'BrownSpot': 0, 'Healthy': 1, 'Hispa': 2, 'LeafBlast': 3}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KjeLJb5mjSxG"},"source":["# **Building the Model**\r\n","The pretrained Inception V3 model is loaded and Fully connected layers are added."]},{"cell_type":"code","metadata":{"id":"aLRl2WDQXwDI","executionInfo":{"status":"ok","timestamp":1609750365840,"user_tz":-330,"elapsed":2813,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}}},"source":["base_model =InceptionV3(weights='imagenet', include_top=False, input_shape=(299,299, 3))"],"execution_count":43,"outputs":[]},{"cell_type":"code","metadata":{"id":"JGFTTeAnYu62","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609750366259,"user_tz":-330,"elapsed":1961,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}},"outputId":"1ad54fad-6bad-4fbc-c9b0-ee480a08169d"},"source":["model=models.Sequential()\n","model.add(base_model)\n","model.add(layers.MaxPooling2D((2,2)))\n","model.add(layers.Flatten())\n","model.add(layers.Dropout(0.5))\n","model.add(layers.Dense(256, activation='relu'))\n","model.add(Dense(4, activation='softmax'))\n","base_model.trainable = False\n","model.summary()"],"execution_count":44,"outputs":[{"output_type":"stream","text":["Model: \"sequential_4\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","inception_v3 (Functional)    (None, 8, 8, 2048)        21802784  \n","_________________________________________________________________\n","max_pooling2d_19 (MaxPooling (None, 4, 4, 2048)        0         \n","_________________________________________________________________\n","flatten_3 (Flatten)          (None, 32768)             0         \n","_________________________________________________________________\n","dropout_4 (Dropout)          (None, 32768)             0         \n","_________________________________________________________________\n","dense_11 (Dense)             (None, 256)               8388864   \n","_________________________________________________________________\n","dense_12 (Dense)             (None, 4)                 1028      \n","=================================================================\n","Total params: 30,192,676\n","Trainable params: 8,389,892\n","Non-trainable params: 21,802,784\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"APMaWL71k5pw","executionInfo":{"status":"ok","timestamp":1609750457258,"user_tz":-330,"elapsed":868,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}}},"source":["model.compile(optimizer='adam',\r\n","              loss='categorical_crossentropy',\r\n","              metrics=['accuracy'])"],"execution_count":45,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_JD3oGRyjnrq"},"source":["# **Training the Model**\r\n","\r\n","The model is trained for 45 epochs."]},{"cell_type":"code","metadata":{"id":"HjJzbFYFR8ST","executionInfo":{"status":"ok","timestamp":1609750466949,"user_tz":-330,"elapsed":841,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}}},"source":["checkpoint_cp=tf.keras.callbacks.ModelCheckpoint(\"CNN_proj.h5\",save_best_only=True,save_weights_only=True,verbose=1)\r\n","#early_stopping_cp=tf.keras.callbacks.EarlyStopping(patience=10,restore_best_weights=True)"],"execution_count":46,"outputs":[]},{"cell_type":"code","metadata":{"id":"EZDEIg0GCuJK"},"source":["history = model.fit_generator(\r\n","      train_generator,\r\n","      steps_per_epoch=train_generator.samples//train_generator.batch_size,\r\n","      epochs=15,  \r\n","      validation_data=validation_generator,\r\n","      validation_steps=validation_generator.samples//validation_generator.batch_size,\r\n","      verbose=1,\r\n","      callbacks=[checkpoint_cp]\r\n","      ) "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"j4nZgC7ZSoFF","executionInfo":{"status":"ok","timestamp":1609752780664,"user_tz":-330,"elapsed":7674,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}}},"source":["model.load_weights(\"CNN_proj.h5\")"],"execution_count":51,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5Vzbo3CqZC1h","executionInfo":{"status":"ok","timestamp":1609755489485,"user_tz":-330,"elapsed":2697659,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}},"outputId":"a83276a9-566d-4d9a-a862-894bfeb6f4aa"},"source":["history = model.fit_generator(\n","      train_generator,\n","      steps_per_epoch=train_generator.samples//train_generator.batch_size,\n","      epochs=30,  \n","      validation_data=validation_generator,\n","      validation_steps=validation_generator.samples//validation_generator.batch_size,\n","      verbose=1,\n","      callbacks=[checkpoint_cp]\n","      ) "],"execution_count":53,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  warnings.warn('`Model.fit_generator` is deprecated and '\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 1/30\n","143/143 [==============================] - 90s 626ms/step - loss: 0.8218 - accuracy: 0.6749 - val_loss: 1.0247 - val_accuracy: 0.5694\n","\n","Epoch 00001: val_loss did not improve from 0.94841\n","Epoch 2/30\n","143/143 [==============================] - 89s 625ms/step - loss: 0.8060 - accuracy: 0.6856 - val_loss: 0.9933 - val_accuracy: 0.5980\n","\n","Epoch 00002: val_loss did not improve from 0.94841\n","Epoch 3/30\n","143/143 [==============================] - 90s 627ms/step - loss: 0.8044 - accuracy: 0.6797 - val_loss: 0.9254 - val_accuracy: 0.6061\n","\n","Epoch 00003: val_loss improved from 0.94841 to 0.92543, saving model to CNN_proj.h5\n","Epoch 4/30\n","143/143 [==============================] - 90s 626ms/step - loss: 0.8144 - accuracy: 0.6799 - val_loss: 0.9250 - val_accuracy: 0.6245\n","\n","Epoch 00004: val_loss improved from 0.92543 to 0.92502, saving model to CNN_proj.h5\n","Epoch 5/30\n","143/143 [==============================] - 90s 628ms/step - loss: 0.8015 - accuracy: 0.6764 - val_loss: 0.9559 - val_accuracy: 0.6143\n","\n","Epoch 00005: val_loss did not improve from 0.92502\n","Epoch 6/30\n","143/143 [==============================] - 89s 624ms/step - loss: 0.7887 - accuracy: 0.6905 - val_loss: 0.9383 - val_accuracy: 0.6265\n","\n","Epoch 00006: val_loss did not improve from 0.92502\n","Epoch 7/30\n","143/143 [==============================] - 90s 628ms/step - loss: 0.7954 - accuracy: 0.6825 - val_loss: 0.9091 - val_accuracy: 0.6429\n","\n","Epoch 00007: val_loss improved from 0.92502 to 0.90914, saving model to CNN_proj.h5\n","Epoch 8/30\n","143/143 [==============================] - 90s 628ms/step - loss: 0.7953 - accuracy: 0.6870 - val_loss: 0.9752 - val_accuracy: 0.6061\n","\n","Epoch 00008: val_loss did not improve from 0.90914\n","Epoch 9/30\n","143/143 [==============================] - 90s 626ms/step - loss: 0.7860 - accuracy: 0.6834 - val_loss: 0.9343 - val_accuracy: 0.6224\n","\n","Epoch 00009: val_loss did not improve from 0.90914\n","Epoch 10/30\n","143/143 [==============================] - 90s 628ms/step - loss: 0.7842 - accuracy: 0.6940 - val_loss: 0.9863 - val_accuracy: 0.6122\n","\n","Epoch 00010: val_loss did not improve from 0.90914\n","Epoch 11/30\n","143/143 [==============================] - 89s 622ms/step - loss: 0.7776 - accuracy: 0.6931 - val_loss: 0.9648 - val_accuracy: 0.5959\n","\n","Epoch 00011: val_loss did not improve from 0.90914\n","Epoch 12/30\n","143/143 [==============================] - 89s 623ms/step - loss: 0.7721 - accuracy: 0.6905 - val_loss: 1.0172 - val_accuracy: 0.5755\n","\n","Epoch 00012: val_loss did not improve from 0.90914\n","Epoch 13/30\n","143/143 [==============================] - 89s 625ms/step - loss: 0.7709 - accuracy: 0.7012 - val_loss: 0.9713 - val_accuracy: 0.5857\n","\n","Epoch 00013: val_loss did not improve from 0.90914\n","Epoch 14/30\n","143/143 [==============================] - 90s 626ms/step - loss: 0.7780 - accuracy: 0.6966 - val_loss: 0.9525 - val_accuracy: 0.6184\n","\n","Epoch 00014: val_loss did not improve from 0.90914\n","Epoch 15/30\n","143/143 [==============================] - 90s 626ms/step - loss: 0.7673 - accuracy: 0.6971 - val_loss: 0.9815 - val_accuracy: 0.6122\n","\n","Epoch 00015: val_loss did not improve from 0.90914\n","Epoch 16/30\n","143/143 [==============================] - 89s 623ms/step - loss: 0.7793 - accuracy: 0.6938 - val_loss: 0.9559 - val_accuracy: 0.6082\n","\n","Epoch 00016: val_loss did not improve from 0.90914\n","Epoch 17/30\n","143/143 [==============================] - 90s 626ms/step - loss: 0.7785 - accuracy: 0.6940 - val_loss: 0.9434 - val_accuracy: 0.6224\n","\n","Epoch 00017: val_loss did not improve from 0.90914\n","Epoch 18/30\n","143/143 [==============================] - 89s 624ms/step - loss: 0.7709 - accuracy: 0.6953 - val_loss: 0.9751 - val_accuracy: 0.6122\n","\n","Epoch 00018: val_loss did not improve from 0.90914\n","Epoch 19/30\n","143/143 [==============================] - 89s 623ms/step - loss: 0.7731 - accuracy: 0.6993 - val_loss: 0.9429 - val_accuracy: 0.6184\n","\n","Epoch 00019: val_loss did not improve from 0.90914\n","Epoch 20/30\n","143/143 [==============================] - 89s 625ms/step - loss: 0.7698 - accuracy: 0.6988 - val_loss: 0.9444 - val_accuracy: 0.6184\n","\n","Epoch 00020: val_loss did not improve from 0.90914\n","Epoch 21/30\n","143/143 [==============================] - 90s 626ms/step - loss: 0.7570 - accuracy: 0.7045 - val_loss: 0.9692 - val_accuracy: 0.5796\n","\n","Epoch 00021: val_loss did not improve from 0.90914\n","Epoch 22/30\n","143/143 [==============================] - 89s 625ms/step - loss: 0.7493 - accuracy: 0.7118 - val_loss: 0.9514 - val_accuracy: 0.6245\n","\n","Epoch 00022: val_loss did not improve from 0.90914\n","Epoch 23/30\n","143/143 [==============================] - 90s 627ms/step - loss: 0.7655 - accuracy: 0.6966 - val_loss: 0.9336 - val_accuracy: 0.6327\n","\n","Epoch 00023: val_loss did not improve from 0.90914\n","Epoch 24/30\n","143/143 [==============================] - 92s 646ms/step - loss: 0.7646 - accuracy: 0.6993 - val_loss: 1.0022 - val_accuracy: 0.5959\n","\n","Epoch 00024: val_loss did not improve from 0.90914\n","Epoch 25/30\n","143/143 [==============================] - 92s 642ms/step - loss: 0.7560 - accuracy: 0.7034 - val_loss: 0.9785 - val_accuracy: 0.6082\n","\n","Epoch 00025: val_loss did not improve from 0.90914\n","Epoch 26/30\n","143/143 [==============================] - 90s 626ms/step - loss: 0.7570 - accuracy: 0.7004 - val_loss: 0.8754 - val_accuracy: 0.6510\n","\n","Epoch 00026: val_loss improved from 0.90914 to 0.87540, saving model to CNN_proj.h5\n","Epoch 27/30\n","143/143 [==============================] - 90s 627ms/step - loss: 0.7553 - accuracy: 0.7058 - val_loss: 0.9457 - val_accuracy: 0.6143\n","\n","Epoch 00027: val_loss did not improve from 0.87540\n","Epoch 28/30\n","143/143 [==============================] - 90s 628ms/step - loss: 0.7662 - accuracy: 0.6990 - val_loss: 0.9329 - val_accuracy: 0.6286\n","\n","Epoch 00028: val_loss did not improve from 0.87540\n","Epoch 29/30\n","143/143 [==============================] - 89s 625ms/step - loss: 0.7489 - accuracy: 0.7089 - val_loss: 0.9095 - val_accuracy: 0.6347\n","\n","Epoch 00029: val_loss did not improve from 0.87540\n","Epoch 30/30\n","143/143 [==============================] - 89s 625ms/step - loss: 0.7690 - accuracy: 0.6960 - val_loss: 0.9642 - val_accuracy: 0.6347\n","\n","Epoch 00030: val_loss did not improve from 0.87540\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"YJruEZH6keKe"},"source":["# **Analyzing the performance**\r\n","The training is analyzed to see if model is overfiting."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":513},"id":"Jc1-hRUSKuQ9","executionInfo":{"status":"ok","timestamp":1609755538524,"user_tz":-330,"elapsed":1259,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}},"outputId":"70bbb087-9583-496e-ef56-c7213dec6e18"},"source":["from matplotlib import pyplot as plt\r\n","acc = history.history['accuracy']\r\n","val_acc = history.history['val_accuracy']\r\n","\r\n","loss = history.history['loss']\r\n","val_loss = history.history['val_loss']\r\n","\r\n","plt.figure(figsize=(8, 8))\r\n","plt.subplot(2, 1, 1)\r\n","plt.plot(acc, label='Training Accuracy')\r\n","plt.plot(val_acc, label='Validation Accuracy')\r\n","plt.legend(loc='lower right')\r\n","plt.ylabel('Accuracy')\r\n","plt.ylim([min(plt.ylim()),1])\r\n","plt.title('Training and Validation Accuracy')\r\n","\r\n","plt.subplot(2, 1, 2)\r\n","plt.plot(loss, label='Training Loss')\r\n","plt.plot(val_loss, label='Validation Loss')\r\n","plt.legend(loc='upper right')\r\n","plt.ylabel('Cross Entropy')\r\n","plt.ylim([0,2.0])\r\n","plt.title('Training and Validation Loss')\r\n","plt.xlabel('epoch')\r\n","plt.show()"],"execution_count":54,"outputs":[{"output_type":"display_data","data":{"image/png":"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nL///e8sX768zf0sWbKEBQsWsGzZMh577DEWL17ctOwTn/gEixcv5rXXXuOII47gjjvu4KSTTuLss8/mhz/8IcuWLeOQQw5pWr+mpob58+dz7733smLFCurr6/nlL3/ZtHzYsGEsXbqUK664osPbADGxYWWffvppli1bxuLFi3n44YdZtmxZ07CyK1as4JJLLgHCsLKvvvoqy5cv59Zbb+3UMW1LKh+TuweYDQwzszLgOiAXwN1juT8X+Ku7747bdCTwkJnF8vdHd//fVOVTRKTPevxr8P6Knt3nQUfDGTe1u0qsmn7u3LksWLCAO+64A4D77ruP22+/nfr6ejZt2sSqVas45phjEu7j+eef59xzz6Vfv34AnH322U3LXn/9db75zW+yc+dOqqqq+OhHP9puftasWcOkSZM47LDDALj44ou55ZZbuOaaa4BwwQBw/PHH8+CDDyZxEHrHsLKpbEU/z91HuXuuu4919zvc/da44I67/9bdz2+13Tp3PzZ6TXX3G1OVRxER2f/mzp3LU089xdKlS6murub444/n7bff5kc/+hFPPfUUy5cv56yzzmpzmNiOzJ8/n5///OesWLGC6667rsv7iYkNOdsTw83uz2Fl1VWtiEhf1UFJO1WKi4uZM2cOl156aVPjul27dlFUVMTAgQPZvHkzjz/+OLNnz25zHx/60IeYP38+X//616mvr+eRRx5p6k++srKSUaNGUVdXxx/+8IemoWf79+9PZWXlPvs6/PDDWb9+PWvXruXQQw/ld7/7Haecckq3vmNvGFZWAV5ERPa7efPmce655za1qD/22GOZPn06U6ZMYdy4cZx88sntbn/cccfxmc98hmOPPZYRI0a0GPL1u9/9LjNnzmT48OHMnDmzKaiff/75fO5zn+Pmm29ualwHUFBQwG9+8xs+9alPUV9fzwknnMDll1/eqe/TG4eV1XCxIiJ9iIaLPXBpuFgRERFRgBcREclECvAiIiIZSAFeRKSPyaS2V31FV/5mCvAiIn1IQUEB5eXlCvIHEHenvLycgoKCTm2nx+RERPqQsWPHUlZWhgbnOrAUFBS0eAwvGQrwIiJ9SG5uLpMmTUp3NmQ/UBW9iIhIBlKAFxERyUAK8CIiIhlIAV5ERCQDKcCLiIhkIAV4ERGRDJSyAG9md5rZFjN7vY3ls82swsyWRa9vxy073czW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\n","text/plain":["<Figure size 576x576 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Pd9zszvikIiq"},"source":["# **Fine Tuning**\r\n","The last 250 layers of Inception Model are fine tuned to improve the performance."]},{"cell_type":"code","metadata":{"id":"9hS0X2bUOMLN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609755586491,"user_tz":-330,"elapsed":986,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}},"outputId":"72210f89-3ab3-47f1-a47e-a501c9e281d8"},"source":["\n","# Let's take a look to see how many layers are in the base model\n","print(\"Number of layers in the base model: \", len(base_model.layers))\n","base_model.trainable = True\n","\n","# Fine-tuning\n","\n","fine_tune_at = 250\n","for layer in base_model.layers[:fine_tune_at]:\n","  layer.trainable =  False\n","model.summary()"],"execution_count":58,"outputs":[{"output_type":"stream","text":["Number of layers in the base model:  311\n","Model: \"sequential_4\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","inception_v3 (Functional)    (None, 8, 8, 2048)        21802784  \n","_________________________________________________________________\n","max_pooling2d_19 (MaxPooling (None, 4, 4, 2048)        0         \n","_________________________________________________________________\n","flatten_3 (Flatten)          (None, 32768)             0         \n","_________________________________________________________________\n","dropout_4 (Dropout)          (None, 32768)             0         \n","_________________________________________________________________\n","dense_11 (Dense)             (None, 256)               8388864   \n","_________________________________________________________________\n","dense_12 (Dense)             (None, 4)                 1028      \n","=================================================================\n","Total params: 30,192,676\n","Trainable params: 18,931,332\n","Non-trainable params: 11,261,344\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"CfcjcEpOPsa4","executionInfo":{"status":"ok","timestamp":1609755618540,"user_tz":-330,"elapsed":978,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}}},"source":["model.compile(optimizer=RMSprop(lr=0.001/10),\n","              loss='categorical_crossentropy',\n","              metrics=['accuracy'])"],"execution_count":59,"outputs":[]},{"cell_type":"code","metadata":{"id":"R1UZRYzWPrsO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609757142173,"user_tz":-330,"elapsed":1472207,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}},"outputId":"8115e5b5-7c87-472a-eaab-ead94efd5cfa"},"source":["fine_tune_epochs = 15\n","initial_epochs=30\n","total_epochs =  initial_epochs + fine_tune_epochs\n","history_fine = model.fit(train_generator,\n","                         epochs=total_epochs,\n","                         initial_epoch=history.epoch[-1],\n","                         validation_data=validation_generator\n","                         )"],"execution_count":61,"outputs":[{"output_type":"stream","text":["Epoch 30/45\n","144/144 [==============================] - 97s 641ms/step - loss: 0.8922 - accuracy: 0.6553 - val_loss: 1.1722 - val_accuracy: 0.6024\n","Epoch 31/45\n","144/144 [==============================] - 92s 636ms/step - loss: 0.7191 - accuracy: 0.7227 - val_loss: 0.9334 - val_accuracy: 0.6673\n","Epoch 32/45\n","144/144 [==============================] - 91s 633ms/step - loss: 0.6915 - accuracy: 0.7376 - val_loss: 1.0212 - val_accuracy: 0.6268\n","Epoch 33/45\n","144/144 [==============================] - 91s 633ms/step - loss: 0.6205 - accuracy: 0.7718 - val_loss: 1.1616 - val_accuracy: 0.6268\n","Epoch 34/45\n","144/144 [==============================] - 91s 633ms/step - loss: 0.6213 - accuracy: 0.7674 - val_loss: 0.9140 - val_accuracy: 0.6897\n","Epoch 35/45\n","144/144 [==============================] - 92s 635ms/step - loss: 0.5757 - accuracy: 0.7804 - val_loss: 0.9390 - val_accuracy: 0.6856\n","Epoch 36/45\n","144/144 [==============================] - 91s 633ms/step - loss: 0.5650 - accuracy: 0.7838 - val_loss: 1.1174 - val_accuracy: 0.6552\n","Epoch 37/45\n","144/144 [==============================] - 91s 633ms/step - loss: 0.5475 - accuracy: 0.7905 - val_loss: 0.9049 - val_accuracy: 0.7262\n","Epoch 38/45\n","144/144 [==============================] - 92s 637ms/step - loss: 0.5011 - accuracy: 0.8087 - val_loss: 0.9940 - val_accuracy: 0.7302\n","Epoch 39/45\n","144/144 [==============================] - 92s 636ms/step - loss: 0.5016 - accuracy: 0.8186 - val_loss: 0.8014 - val_accuracy: 0.7505\n","Epoch 40/45\n","144/144 [==============================] - 92s 636ms/step - loss: 0.4730 - accuracy: 0.8329 - val_loss: 0.9220 - val_accuracy: 0.7302\n","Epoch 41/45\n","144/144 [==============================] - 92s 635ms/step - loss: 0.4673 - accuracy: 0.8320 - val_loss: 0.8563 - val_accuracy: 0.7404\n","Epoch 42/45\n","144/144 [==============================] - 92s 639ms/step - loss: 0.4462 - accuracy: 0.8362 - val_loss: 0.8368 - val_accuracy: 0.7505\n","Epoch 43/45\n","144/144 [==============================] - 92s 636ms/step - loss: 0.4690 - accuracy: 0.8276 - val_loss: 0.9151 - val_accuracy: 0.7160\n","Epoch 44/45\n","144/144 [==============================] - 92s 636ms/step - loss: 0.4279 - accuracy: 0.8397 - val_loss: 0.9843 - val_accuracy: 0.7383\n","Epoch 45/45\n","144/144 [==============================] - 92s 638ms/step - loss: 0.4048 - accuracy: 0.8547 - val_loss: 0.9868 - val_accuracy: 0.7525\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"oQmh4Sfgk2eE"},"source":["# **Save the model**"]},{"cell_type":"code","metadata":{"id":"PcXlHiYtZXlt","executionInfo":{"status":"ok","timestamp":1609757183369,"user_tz":-330,"elapsed":3048,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}}},"source":["model.save('inception.h5')"],"execution_count":62,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UHhK735clFLn"},"source":["# **Evaluate The Model Performance**"]},{"cell_type":"code","metadata":{"id":"rOa7qr1cZWaC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609764169215,"user_tz":-330,"elapsed":2331,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}},"outputId":"bc459277-a7a3-408f-b297-ff4094653af1"},"source":["test_dir='/content/drive/My Drive/Paddy_disease/test'\n","test_datagen=ImageDataGenerator(rescale=1/255.)\n","\n","test_generator=test_datagen.flow_from_directory(\n","        test_dir,\n","        target_size=(299,299),\n","        batch_size=32,\n","        class_mode='categorical' )\n","\n","model.evaluate(test_generator,verbose=1)"],"execution_count":85,"outputs":[{"output_type":"stream","text":["Found 67 images belonging to 4 classes.\n","3/3 [==============================] - 1s 72ms/step - loss: 0.2843 - accuracy: 0.8806\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[0.2842608094215393, 0.8805969953536987]"]},"metadata":{"tags":[]},"execution_count":85}]},{"cell_type":"code","metadata":{"id":"WvQLGOkQZciA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609766947125,"user_tz":-330,"elapsed":1162,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}},"outputId":"36bd3d2f-412d-496c-cfff-cc0af0dd2561"},"source":["def predict(model, img):\n","    x = image.img_to_array(img)\n","    x = np.expand_dims(x, axis=0)\n","    x = tf.keras.applications.inception_v3.preprocess_input(x)\n","    preds = model.predict(x)\n","    return preds[0]\n","img = image.load_img('/content/drive/MyDrive/Paddy_disease/test/BrownSpot/Resized IMG_2998 resized.jpg', target_size=(299, 299))\n","preds = predict(load_model('inception.h5'), img)\n","print(np.argmax(preds))"],"execution_count":96,"outputs":[{"output_type":"stream","text":["0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"c5H-YzQ8ltiu"},"source":["# **Converting the trained model to tensorflow lite model**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d9Pshk1TFUJn","executionInfo":{"status":"ok","timestamp":1609759038254,"user_tz":-330,"elapsed":53029,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}},"outputId":"916be8b6-3141-445c-f26c-bd07b62af2fd"},"source":["model = 'inception.h5'\r\n","converter = tf.compat.v1.lite.TFLiteConverter.from_keras_model_file(model)\r\n","tflite_model = converter.convert()\r\n","open(\"inception_final.tflite\", \"wb\").write(tflite_model)"],"execution_count":72,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/backend.py:434: UserWarning: `tf.keras.backend.set_learning_phase` is deprecated and will be removed after 2020-10-11. To update it, simply pass a True/False value to the `training` argument of the `__call__` method of your layer or model.\n","  warnings.warn('`tf.keras.backend.set_learning_phase` is deprecated and '\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /tmp/tmpk0a_1q_w/assets\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/lite/python/convert_saved_model.py:60: load (from tensorflow.python.saved_model.loader_impl) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","This function will only be available through the v1 compatibility library as tf.compat.v1.saved_model.loader.load or tf.compat.v1.saved_model.load. There will be a new function for importing SavedModels in Tensorflow 2.0.\n","INFO:tensorflow:Restoring parameters from /tmp/tmpk0a_1q_w/variables/variables\n","INFO:tensorflow:The given SavedModel MetaGraphDef contains SignatureDefs with the following keys: {'serving_default', '__saved_model_init_op'}\n","INFO:tensorflow:input tensors info: \n","INFO:tensorflow:Tensor's key in saved_model's tensor_map: inception_v3_input\n","INFO:tensorflow: tensor name: serving_default_inception_v3_input:0, shape: (-1, 299, 299, 3), type: DT_FLOAT\n","INFO:tensorflow:output tensors info: \n","INFO:tensorflow:Tensor's key in saved_model's tensor_map: dense_12\n","INFO:tensorflow: tensor name: StatefulPartitionedCall:0, shape: (-1, 4), type: DT_FLOAT\n","INFO:tensorflow:Restoring parameters from /tmp/tmpk0a_1q_w/variables/variables\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/lite/python/util.py:327: convert_variables_to_constants (from tensorflow.python.framework.graph_util_impl) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use `tf.compat.v1.graph_util.convert_variables_to_constants`\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/convert_to_constants.py:856: extract_sub_graph (from tensorflow.python.framework.graph_util_impl) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use `tf.compat.v1.graph_util.extract_sub_graph`\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["120694800"]},"metadata":{"tags":[]},"execution_count":72}]},{"cell_type":"markdown","metadata":{"id":"OQr4__k-l1C_"},"source":["# **Model optimization**\r\n","Quantize the model to reduce the size of the model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EQxwa7GlFebD","executionInfo":{"status":"ok","timestamp":1609759130392,"user_tz":-330,"elapsed":44588,"user":{"displayName":"mvsr intel","photoUrl":"","userId":"01299535337130864694"}},"outputId":"92e540aa-2de4-42a9-caae-a654c3eaf544"},"source":["converter.optimizations = [tf.lite.Optimize.OPTIMIZE_FOR_SIZE]\r\n","tflite_quant_model = converter.convert()\r\n","open(\"inception_final_quant.tflite\", \"wb\").write(tflite_quant_model)"],"execution_count":73,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /tmp/tmp7jxf2ps2/assets\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /tmp/tmp7jxf2ps2/assets\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Restoring parameters from /tmp/tmp7jxf2ps2/variables/variables\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Restoring parameters from /tmp/tmp7jxf2ps2/variables/variables\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:The given SavedModel MetaGraphDef contains SignatureDefs with the following keys: {'serving_default', '__saved_model_init_op'}\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:The given SavedModel MetaGraphDef contains SignatureDefs with the following keys: {'serving_default', '__saved_model_init_op'}\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:input tensors info: \n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:input tensors info: \n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Tensor's key in saved_model's tensor_map: inception_v3_input\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Tensor's key in saved_model's tensor_map: inception_v3_input\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow: tensor name: serving_default_inception_v3_input:0, shape: (-1, 299, 299, 3), type: DT_FLOAT\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow: tensor name: serving_default_inception_v3_input:0, shape: (-1, 299, 299, 3), type: DT_FLOAT\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:output tensors info: \n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:output tensors info: \n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Tensor's key in saved_model's tensor_map: dense_12\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Tensor's key in saved_model's tensor_map: dense_12\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow: tensor name: StatefulPartitionedCall:0, shape: (-1, 4), type: DT_FLOAT\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow: tensor name: StatefulPartitionedCall:0, shape: (-1, 4), type: DT_FLOAT\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Restoring parameters from /tmp/tmp7jxf2ps2/variables/variables\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Restoring parameters from /tmp/tmp7jxf2ps2/variables/variables\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["30625072"]},"metadata":{"tags":[]},"execution_count":73}]}]}